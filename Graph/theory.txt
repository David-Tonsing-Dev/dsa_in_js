Graph adjacency matrix:

Take example of pentagon, with verties A, B, C, D, E 

    A B C D E
A   0 1 0 0 1
B   1 0 1 0 0
C   0 1 0 1 0
D   0 0 1 0 1
E   1 0 0 1 0

Complexity: 
    1. adding new vertex say F will be O(|V|^2);
    2. create an edge from the F to B (bidirectional) will be O(1);
    3. remove the edge O(1) as we wil just change the value from the matrix indexes;
    4. remove the vertex will be O(V^2);

Cons: 
    1. As the matrix store the 0s value too, which makes the algorithm very unefficient when come to large number of data.



Graph adjacency list:

{
    A: ["B", "E"],
    B: ["A", "C"],
    C: ["B", "D"],
    D: ["C", "E"],
    E: ["A", "D"]
}

Complexity:
    1. adding new vertex say F will be O(1);
    2. create an edge from the F to B (bidirectional) will be O(1);
    3. remove the edge O(E) as we have to iterates through all the edges;
    4. remove the vertext will be O(V + E);

Pros: 
    More efficient than matrix as it doesn't store the 0s value which will save lots of space.
